<?php

/**
 * @file
 * Ting Subsearch Common.
 */

/**
 * Do a secondary search juggling around the drupal static.
 *
 * @param string $keys
 *   The search phrase.
 * @param array $options
 *   Search options.
 *
 * @return \Ting\Search\TingSearchResultInterface
 *   The search result of the secondary search.
 */
function ting_subsearch_common_do_secondary_search($keys, $options = array()) {
  $search_result = ting_search_current_results();
  $request = $search_result->getSearchRequest();

  return $request->withFullTextQuery($keys)
    ->withFacets(array())
    ->withCount(0)
    ->withPage(0)
    ->execute();
}

/**
 * Callback handler for suggested keys.
 *
 * Find suggested keys based on keys and callback.
 *
 * @param $keys
 *   The search keys
 * @param $callback
 *   Callback function to handle suggested keys.
 *
 * @return bool
 */
function ting_subsearch_common_suggested_keys($keys, $callback) {
  if (function_exists($callback)) {
    $suggestion = $callback($keys);
    if ($suggestion == FALSE || $suggestion == $keys) {
      return FALSE;
    }
    else {
      return $suggestion;
    }
  }

  return FALSE;
}

/**
 * Split query string.
 *
 * @TODO: Fill out parameter descriptions.
 *
 * @param $query
 * @param array $original_query
 *
 * @return array
 */
function ting_subsearch_common_query_params($query, $original_query = array()) {
  $result = array_merge($original_query, drupal_get_query_array($query));
  return $result;
}

/**
 * Implements hook_libraries_info().
 */
function ting_subsearch_common_libraries_info() {
  return array(
    'guzzle' => array(
      'name' => 'Guzzle',
      'vendor url' => 'https://github.com/guzzle/guzzle',
      'download url' => 'https://github.com/guzzle/guzzle',
      'version' => '6.2',
      'xautoload' => function ($adapter) {
        $adapter->composerJson('composer.json');
      },
    ),
    'promises' => array(
      'name' => 'Guzzle promises library',
      'vendor url' => 'https://github.com/guzzle/promises',
      'download url' => 'https://github.com/guzzle/promises',
      'version' => '1.2',
      'xautoload' => function ($adapter) {
        $adapter->composerJson('composer.json');
      },
    ),
    'http-message' => array(
      'name' => 'Common interface for HTTP messages',
      'vendor url' => 'https://github.com/php-fig/http-message',
      'download url' => 'https://github.com/php-fig/http-message',
      'version' => '1.0',
      'xautoload' => function ($adapter) {
        $adapter->composerJson('composer.json');
      },
    ),
    'psr7' => array(
      'name' => 'PSR-7 message implementation',
      'vendor url' => 'https://github.com/guzzle/psr7',
      'download url' => 'https://github.com/guzzle/psr7',
      'version' => '1.3',
      'xautoload' => function ($adapter) {
        $adapter->composerJson('composer.json');
      },
    ),
  );
}
